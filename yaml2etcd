#!/usr/bin/ruby

require 'yaml'
require 'etcd'
require 'optparse'

class EtcdImport

  def initialize
    self.optparse
    @etcd = self.class.connect(@options[:host], @options[:port], @options[:verbose])
    @hash = self.class.read_config
    import_structure @hash, @options[:root_path]
  end

  def optparse
    @options = Hash.new

    @options[:host] = ENV['ETCD_HOST']
    @options[:port] = ENV['ETCD_PORT']
    @options[:root_path] = "/config"

    @options[:host] ||= "127.0.0.1"
    @options[:port] ||= 4001

    OptionParser.new do |opts|
      opts.banner = "Reads YAML file and imports the data into ETCD\n\nUsage: #{$0} [OPTIONS] < config.yaml"
      opts.separator ""
      opts.separator "Connection options:"
      opts.on("-s", "--host HOST", "hostname/IP of the ETCD service (ETCD_HOST envvar also applies) [DEFAULT: 127.0.0.1]") do |param|
        @options[:host] = param
      end
      opts.on("-p", "--port PORT", "port of the ETCD service (ETCD_PORT envvar also applies) [DEFAULT: 4001]") do |param|
        @options[:port] = param
      end
      opts.separator ""
      opts.separator "Common options:"
      opts.on("-r", "--root-path PATH", "root PATH of ETCD tree to inject the data [DEFAULT: /config]") do |param|
        @options[:root_path] = param
      end
      opts.on("-v", "--verbose", "run verbosely") do |param|
        @options[:verbose] = param
      end
      opts.on_tail("-h", "--help", "show usage") do |param|
        puts opts;
        exit! 0
      end
    end.parse!
  end

  def import_structure (hash, path="")
    begin
      hash.each do |k, v|
        etcd_key = path + "/" + k.to_s
        case v
        when Hash
          import_structure(v, etcd_key)
        else
          @etcd.set(etcd_key, value: v)
          puts("SET: " + etcd_key + ": " + v.to_json) if @options[:verbose]
        end
      end
    rescue Exception => e
      $stderr.puts "Configuration import failed"
      $stderr.puts e.message
      exit! 1
    end
  end

  class << self

    def read_config
      begin
        return YAML.load(ARGF.read)
      rescue
        $stderr.puts "Couldn't parse YAML"
        exit! 1
      end
    end

    def connect (host, port, verbose=false)
      etcd = Etcd.client(host: host, port: port)
      begin
        etcd.version
        puts "Connected to ETCD on #{host}:#{port}" if verbose
        return etcd
      rescue Exception => e
        $stderr.puts "Couldn't connect to etcd at #{host}:#{port}"
        $stderr.puts e.message
        exit! 1
      end
    end

  end

end

EtcdImport.new