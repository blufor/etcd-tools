#!/usr/bin/env ruby

require 'yaml'
require 'erb'
require 'etcd'
require 'optparse'

class EtcdERB < ERB

  attr_reader :etcd

  def initialize
    self.optparse
    @etcd = self.class.connect(@options[:url])
    super self.class.template
    puts self.result
  end

  def optparse
    @options = Hash.new

    @options[:url] = ENV['ETCDCTL_ENDPOINT']
    @options[:url] ||= "http://127.0.0.1:4001"

    OptionParser.new do |opts|
      opts.banner = "Applies variables from ETCD onto ERB template\n\nUsage: #{$0} [OPTIONS] < template.erb > outfile"
      opts.separator ""
      opts.separator "Connection options:"
      opts.on("-u", "--url URL", "URL endpoint of the ETCD service (ETCDCTL_ENDPOINT envvar also applies) [DEFAULT: http://127.0.0.1:4001]") do |param|
        @options[:url] = param
      end
      opts.separator ""
      opts.separator "Common options:"
      opts.on_tail("-h", "--help", "show usage") do |param|
        puts opts;
        exit! 0
      end
    end.parse!
  end

  def result
    super binding
  end

  def value path
    return @etcd.get('/' + path.sub(/^\//, '')).value
  end

  def keys path
    path.sub!(/^\//, '')
    if @etcd.get('/' + path).directory?
      return @etcd.get('/' + path).children.map { |key| key.key }
    else
      return []
    end
  end

  class << self

    def connect (url)
      (host, port) = url.gsub(/^https?:\/\//, '').gsub(/\/$/, '').split(':')
      etcd = Etcd.client(host: host, port: port)
      begin
        etcd.version
        return etcd
      rescue Exception => e
        $stderr.puts "Couldn't connect to etcd at #{host}:#{port}"
        $stderr.puts e.message
        exit! 1
      end
    end

    def template
      ARGF.read
    end

  end


end

EtcdERB.new
