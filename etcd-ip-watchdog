#!/usr/bin/ruby

require 'mkmf'
require 'ipaddr'
require 'timeout'
require 'net/ping'
require 'yaml'
require 'etcd'

class EtcdIPWatchdog

  def initialize
    # read config file
    begin
      @config = YAML.load_file('/etc/etcd-ip-watchdog.yaml')
    rescue
      @config = YAML.load_file('./etcd-ip-watchdog.yaml')
    rescue
      @config = {
        etcd_endpoint: 'http://127.0.0.1:4001',
        interface: 'eth0',
        vip: '192.168.0.168/24',
      }
    end

    # `arping` command
    @arping_bin = find_executable 'arping'
    if @arping_bin == nil then
      $stderr.puts "Couldn't find arping binary! Is it installed in your PATH?"
      exit! 1
    end

    # `ip` command
    @iproute_bin = find_executable 'ip'
    if @iproute_bin == nil then
      $stedd.puts "Coudn't find iproute2 binary! Is it installed in your PATH?"
      exit! 1
    end

    @etcd = self.class.etcd_connect(@config[:etcd_endpoint])
  end

  def run_setter
    Thread.new do
      loop do
        # TODO
      end
    end
  end

  def run_pinger
    Thread.new do
      loop do
        # TODO
      end
    end
  end

  def run_etcd_watch
    Thread.new do
      loop do
        # TODO
      end
    end
  end


  class << self

    def etcd_connect (url)
      (host, port) = url.gsub(/^https?:\/\//, '').gsub(/\/$/, '').split(':')
      etcd = Etcd.client(host: host, port: port)
      begin
        JSON.parse(etcd.version)
        return etcd
      rescue Exception => e
        $stderr.puts "Couldn't connect to etcd at #{host}:#{port}"
        $stderr.puts e.message
        exit! 1
      end
    end

    def etcd_watch (*args)
      args[:etcd].watch
    end

    def etcd_master? (*args)
      # TODO
    end

    def vip_handle! (*args)
      cmd = [ args[:iproute_bin], 'address', '', args[:vip]+'/'+args[:prefix], 'dev', args[:interfaces] ]

      case args[:action]
      when 'leader'
        cmd[2] = 'add'

      when 'follower'
        cmd[3] = 'delete'
      end
      # TODO
    end

    def vip_alive? (*args)
      icmp = Net::Ping::ICMP.new(args[:ip])
      args[:retry] ||= 3
      (1..args[:retry]).each do
        icmp.ping && return true
      end
    end

    def vip_dup? (*args)
      cmd = [ args[:arping_bin], '-D', '-c1', '-w5', '-I', args[:interface], args[:vip] ]
      system(cmd) ? return false : return true
    end

    def vip_update! (*args)
      cmd = [ args[:arping_bin], '-U', '-c3', '-I', args[:interface], args[:vip] ]
      system(cmd)
    end

  end

end

app = EtcdERB.new
